# Sales Management System

## Overview

This project is a comprehensive sales management system built with Next.js (React) for the client-side and Node.js with Express for the server-side. It provides a user-friendly interface for managing sales transactions, tracking performance, and generating reports. Real-time updates are enabled using Socket.IO.

## Features

-   **Sales Transaction Management:**
    -   Create, read, update, and delete sales records efficiently.
    -   Utilize a user-friendly form ([`SalesForm`](client/src/components/sale/SalesForm.tsx)) for easy data input.
    -   View detailed sales information in a structured dialog ([`SalesDetails`](client/src/components/sale/SalesDetails.tsx)).
-   **Real-time Updates:**
    -   Leverages Socket.IO for instant synchronization of sales data across all connected clients.
    -   Ensures that all users see the most up-to-date information without manual refresh.
-   **Data Visualization:**
    -   Displays key sales metrics such as total revenue, total transactions, and paid sales on the main dashboard ([`SalesPage`](client/src/app/page.tsx)).
    -   Provides insights into sales performance at a glance.
-   **User Interface:**
    -   Modern and responsive UI built with Radix UI and Tailwind CSS.
    -   Ensures a seamless user experience across various devices.
-   **Database:**
    -   Uses a MySQL database to store sales data.
    -   Employs Sequelize ORM for efficient database interactions.
-   **Payment Method Handling:**
    -   Supports multiple payment methods including cash, card, mobile payment, and credit.
    -   Allows users to record various payment types for each transaction.
-   **Payment Status Tracking:**
    -   Tracks payment status with options for pending, partial, and paid.
    -   Provides clear visibility into the financial status of each sale.
-   **Filtering and Searching:**
    -   Implements filtering by payment status and payment method.
    -   Includes searching by invoice number, customer name, and product name ([`SalesTable`](client/src/components/sale/SalesTable.tsx)).

## Technologies Used

### Client (Next.js)

-   [Next.js](https://nextjs.org): React framework for building performant web applications.
-   [React](https://reactjs.org): JavaScript library for building user interfaces.
-   [TypeScript](https://www.typescriptlang.org): Superset of JavaScript that adds static typing.
-   [Tailwind CSS](https://tailwindcss.com): Utility-first CSS framework for rapidly styling HTML elements.
-   [Radix UI](https://www.radix-ui.com): Set of unstyled, accessible UI primitives.
-   [Lucide React](https://lucide.dev/): Beautifully simple, pixel-perfect icons.
-   [Socket.IO Client](https://socket.io/): Enables real-time, bidirectional communication between web clients and servers.
-   [clsx](https://github.com/lukeed/clsx): A tiny (239B) utility for constructing `className` strings conditionally.
-   [tailwind-merge](https://github.com/dcastil/tailwind-merge): Utility to efficiently merge Tailwind CSS classes in JavaScript.
-   [class-variance-authority](https://github.com/joe-bell/cva): Utility for writing composable, reusable variants.
-   [next-themes](https://github.com/pacocoursey/next-themes): Adds theming support.
-   [sonner](https://sonner.emilkowal.ski/): An opinionated toast component for React.

### Server (Node.js)

-   [Node.js](https://nodejs.org): JavaScript runtime environment.
-   [Express](https://expressjs.com): Web application framework for Node.js.
-   [TypeScript](https://www.typescriptlang.org): Superset of JavaScript that adds static typing.
-   [Sequelize](https://sequelize.org): Promise-based Node.js ORM for MySQL.
-   [Socket.IO Server](https://socket.io/): Enables real-time, bidirectional communication between web clients and servers.
-   [cors](https://github.com/expressjs/cors): CORS middleware for Express.js.
-   [mysql2](https://github.com/sidorares/node-mysql2): MySQL client for Node.js.
-   [zod](https://github.com/colinhacks/zod): TypeScript-first schema validation with static type inference.
-   [dotenv](https://github.com/motdotla/dotenv): Loads environment variables from .env file.
-   [nodemon](https://nodemon.io/): Automatically restarts the node application when file changes in the directory are detected.

## Setup

### Prerequisites

-   Node.js (version >= 20)
-   npm (version >= 10) or yarn (version >= 1.22)
-   MySQL Database

### Installation

1.  **Clone the repository:**

    ```bash
    git clone <repository-url>
    cd sales-management-system
    ```

2.  **Install server dependencies:**

    ```bash
    cd server
    npm install # or yarn install
    ```

3.  **Configure the server:**

    -   Create a `.env` file in the `server` directory.
    -   Add the following environment variables, adjusting the values as necessary:

        ```
        PORT=8080
        NODE_ENV=development
        EXPRESS_SESSION_SECRET=<your-secret>
        ACCESS_TOKEN_SECRET=<your-secret>
        ACCESS_TOKEN_EXPIRY=1h
        ALLOWED_ORIGINS=http://localhost:3000
        RABBITMQ_URL=amqp://localhost
        RABBITMQ_QUEUE=employee_created
        EXTERNAL_API_URL="http://localhost:8082/"
        EXTERNAL_API_URL2="http://localhost:8086/"
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=yourpassword
        DEV_DB_USERNAME=root
        DEV_DB_PASSWORD=
        DEV_DB_NAME=websocket
        DEV_DB_HOST=localhost
        DEV_DB_PORT=3306
        TEST_DB_USERNAME=your_test_username
        TEST_DB_PASSWORD=your_test_password
        TEST_DB_NAME=your_test_database
        TEST_DB_HOST=127.0.0.1
        TEST_DB_PORT=3306
        PROD_DB_USERNAME=root
        PROD_DB_PASSWORD=
        PROD_DB_NAME=websocket
        PROD_DB_HOST=localhost
        PROD_DB_PORT=3306
        ```

4.  **Setup the database:**

    -   Ensure MySQL is installed and running.
    -   Create a database named `websocket` (or the name specified in your `.env` file).
    -   Run the Sequelize migrations to create the necessary tables:

        ```bash
        npx sequelize db:migrate
        ```

5.  **Install client dependencies:**

    ```bash
    cd ../client
    npm install # or yarn install
    ```

6.  **Configure the client:**

    -   The client connects to the server at `http://localhost:8080` by default. Ensure this matches your server configuration or update the `client/src/utils/socket.ts` file accordingly.

### Detailed Installation Guidelines

1.  **Server Configuration:**
    -   **Environment Variables:** Ensure all necessary environment variables are correctly set in the `.env` file. These variables configure database connections, API keys, and other sensitive information.
    -   **Database Setup:** Verify that the MySQL database is properly configured and accessible. Check the database host, port, username, and password.
    -   **Sequelize Migrations:** Run Sequelize migrations to create the database schema. This ensures that all required tables are created with the correct structure.

2.  **Client Configuration:**
    -   **API Endpoint:** Confirm that the client is correctly configured to connect to the server's API endpoint. This is typically set in the `client/src/utils/socket.ts` file.
    -   **Dependency Installation:** Ensure all client-side dependencies are installed correctly. Missing or outdated dependencies can cause unexpected issues.

## Running the Application

1.  **Start the server:**

    ```bash
    cd server
    npm run dev # or yarn dev
    ```

2.  **Start the client:**

    ```bash
    cd client
    npm run dev # or yarn dev
    ```

3.  **Access the application:**

    -   Open your browser and navigate to `http://localhost:3000`.

## Key Components

### Client

-   [`src/app/page.tsx`](client/src/app/page.tsx): Main page component that displays sales statistics and the sales table. Fetches sales data from the server and manages the sales form and details dialogs.
-   [`src/components/sale/SalesTable.tsx`](client/src/components/sale/SalesTable.tsx): Displays the sales data in a table format, with options to view, edit, and delete sales.
-   [`src/components/sale/SalesForm.tsx`](client/src/components/sale/SalesForm.tsx): Form for creating and updating sales records.
-   [`src/components/sale/SalesDetails.tsx`](client/src/components/sale/SalesDetails.tsx): Displays detailed information for a selected sale.
-   [`src/components/ui/*`](client/src/components/ui): Reusable UI components built with Radix UI and Tailwind CSS.
-   [`src/utils/socket.ts`](client/src/utils/socket.ts): Initializes and manages the Socket.IO client connection.

### Server

-   [`src/index.ts`](server/src/index.ts): Main entry point for the server application. Sets up the Express server, Socket.IO, and database connection.
-   [`src/api/sale.ts`](server/src/api/sale.ts): Defines the API endpoints for managing sales records.
-   [`src/services/socket.ts`](server/src/services/socket.ts): Handles Socket.IO events for real-time updates.
-   [`src/models/*`](server/src/models): Sequelize models for the database tables.
-   [`src/migrations/*`](server/src/migrations): Sequelize migrations for creating the database schema.
-   [`src/config/config.js`](server/src/config/config.js): Configuration file for Sequelize.
-   [`src/config/sequelize.ts`](server/src/config/sequelize.ts): Database connection setup.

## Real-time Updates with Socket.IO

The server uses Socket.IO to broadcast real-time updates to all connected clients whenever a sale is created, updated, or deleted.

-   [`server/src/services/socket.ts`](server/src/services/socket.ts) contains the logic for emitting Socket.IO events.
-   [`client/src/app/page.tsx`](client/src/app/page.tsx) listens for these events and updates the sales data accordingly.

## Contributing

Contributions are welcome! Please feel free to submit pull requests or open issues to suggest improvements or report bugs.

## License

[MIT](LICENSE)